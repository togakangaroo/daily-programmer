#+OPTIONS: toc:nil
#+OPTIONS: html-postamble:nil

* Problem Statement

The distance of a pair of integers a and b is defined as the absolute difference between a and b.

Given an integer array nums and an integer =k=, return the kth smallest distance among all the pairs =nums[i]= and =nums[j]= where ~0 <= i < j < nums.length~

** Example 1:

- Input :: ~nums = [1,3,1], k = 1~
- Output :: ~0~
- Explanation :: Here are all the pairs:
  - =(1,3) -> 2=
  - =(1,1) -> 0=
  - =(3,1) -> 2=

Then the 1st smallest distance pair is =(1,1)=, and its distance is =0=.

** Example 2:

- Input :: ~nums = [1,1,1], k = 2~
- Output :: ~0~

** Example 3:

- Input :: ~nums = [1,6,1], k = 3~
- Output :: ~5~
- Explanation :: Here are all the pairs:
  - =(1,6) -> 5=
  - =(1,1) -> 0=
  - =(6,1) -> 5=

** Constraints:

- ~n == nums.length~
- ~2 <= n <= 10^4~
- ~0 <= nums[i] <= 10^6~
- ~1 <= k <= n * (n - 1) / 2~

* Brainstorming

Well, we can of course brute force it, write out all the pairs. That's ~O(n^2)~. Something like that? Which is like 100million in the worst case. Yeah, I guess we don't want to just brute force.

But if you really think about it, what would help most here is a histogram of pairwise differences. If you have that and ~k~ is less than the amount of items in ~0~ we return ~0~, if ~k~ is greater than that, but less than the number of pairs with ~0~ diff + number of paris with ~1~ diff we return ~1~, etc.

Of course building a histogram of all differences is itself ~O(n^2)~. We could do it gradually, but could we get into a good position to do it gradually *first*.

Building a histogram of ~nums~ overall is just ~O(n)~ but how much does that help? It can certainly decrease the amount of pairs we have to consider, but by how much? I'm not going to run through the combinatorics bu I'm not sure it's all that much, plus there's no guarantee that ~nums~ are randomly distributed, they could be all purposefully spaced out.

What about sorting? Sorting can be ~O(n log-n)~. Does a sorted list help? I'm not sure that it does, at least I don't see any obvious way it would.

Well...I suppose there's one way that it could. If ~k~ is toward the larger end of the spectrum then what we're actually asking for is the *largest* difference which would have to be between some of the smallest and some of the largest items in the list. But if ~k~ is small that doesn't help

Ok, hold on, what if we take a sorted list

| 1 | 2 | 5 | 7 | 7 | 8 | 9 |

And calculate the differences between each adjacent number

 | 1 | 3 | 2 | 0 | 1 | 1 |

Does that help things somehow? Well if ~k<n~ then the answer can be found with just a single scan of this list of less than 9999 items.

But what if ~k=9~ for example? We would know that we can start counting at differences of ~4~ and higher. Which means we could make a statement such as at least one of the two pairs would have to be ~4~ and really, you can start at looking at ~4+min=5~

My instincts are telling me that there is something about being able to look at sorted gaps is meaningful.

If I reduce further by adding I get

   | 4 | 5 | 2 | 1 | 2 |

Which is the distance between 1,5 2,7 5,7 7,8 7,9 ... is that helpful? I kind of feel it is not

Oh screw it, I'm sure there's something there but it's not worth pursuing first from the start. Lets do it by brute forcing to a histogram, but checking consistently if we can stop the process early

 - we will need a differences histogram
 - that would be generated from the pairs so we need that

 ----

 No wait, hold on, maybe sorting is useful after all. Let's take the following sorted list

 | 0 | 1 | 2 | 3 | 5 | 6 | 14 | 14 | 15 | 20 |


 I want to observe that there are ~K = n*(n-1)/2~ pairs possible, and therefore finding the =kth= smallest pair is equivalent to finding the ~K-k-1~ largest one. And there's no particular reason to think that ~k~ will be closer to ~1~ than to ~K~.

 Now witht he above list, while knowing the smallest pair requires a table scan finding the largest one is easy - it's ~0,20 -> 20~. In fact, here's a bunch of the largest in order, which are relatively easy to figure out

 | Pair | Diff |   | 0 | 1 | 2 | 3 | 5 | 6 | 14 | 14 | 15 | 20 |
 |------+------+---+---+---+---+---+---+---+----+----+----+----|
 | 0,20 |   20 |   | x |   |   |   |   |   |    |    |    | x  |
 |------+------+---+---+---+---+---+---+---+----+----+----+----|
 | 1,20 |   19 |   |   | x |   |   |   |   |    |    |    | x  |
 |------+------+---+---+---+---+---+---+---+----+----+----+----|
 | 2,20 |   18 |   |   |   | x |   |   |   |    |    |    | x  |
 |------+------+---+---+---+---+---+---+---+----+----+----+----|
 | 3,20 |   17 |   |   |   |   | x |   |   |    |    |    | x  |
 |------+------+---+---+---+---+---+---+---+----+----+----+----|
 | 5,20 |   15 |   |   |   |   |   | x |   |    |    |    | x  |
 | 0,15 |   15 |   | x |   |   |   |   |   |    |    | x  |    |
 |------+------+---+---+---+---+---+---+---+----+----+----+----|
 | 6,20 |   14 |   |   |   |   |   |   | x |    |    |    | x  |
 | 1,15 |   14 |   |   | x |   |   |   |   |    |    | x  |    |
 | 0,14 |   14 |   | x |   |   |   |   |   |    | x  |    |    |
 | 0,14 |   14 |   | x |   |   |   |   |   |    | x  |    |    |
 |------+------+---+---+---+---+---+---+---+----+----+----+----|
 | 2,15 |   13 |   |   |   | x |   |   |   |    |    | x  |    |
 | 1,14 |   13 |   |   | x |   |   |   |   |    | x  |    |    |
 | 1,14 |   13 |   |   | x |   |   |   |   |    | x  |    |    |
 |------+------+---+---+---+---+---+---+---+----+----+----+----|
 | 3,15 |   12 |   |   |   |   | x |   |   |    |    | x  |    |
 | 2,14 |   12 |   |   |   | x |   |   |   |    | x  |    |    |
 | 2,14 |   12 |   |   |   | x |   |   |   |    | x  |    |    |
 |------+------+---+---+---+---+---+---+---+----+----+----+----|
 | 3,14 |   11 |   |   |   |   | x |   |   |    | x  |    |    |
 | 3,14 |   11 |   |   |   |   | x |   |   |    | x  |    |    |
 |------+------+---+---+---+---+---+---+---+----+----+----+----|
 | 5,15 |   10 |   |   |   |   |   | x |   |    |    | x  |    |
 |------+------+---+---+---+---+---+---+---+----+----+----+----|
 | 6,15 |    9 |   |   |   |   |   |   | x |    |    | x  |    |

 I can ostly see the pattern, we are constantly scotting one in on the left or th eright and then re-scanning to get the everything that falls into the current difference

 That 6,20 row is odd - I'm not sure how it fits the pattern. Well lets think about it algorithmically

 - Sort list into some sort of random access structure such as an array (easy for max 10K items)
 - Start with a pointer to "high" and one to "low"
 - While ~low < high~
   - Yield back the diff of ~nums[high]-nums[low]~
   - ~nextLow = nums[low+1]~
   - ~nextHigh = nums[high-1]~
   - if ~nextLow==nums[low]~
     - ~low+=1~
   - else if ~nums[high-1]==nums[high]~
     - ~high-=1~
   - else
   - ...

 So handwavy, you're moving these pointers toward each other while checking the one ahead versus the one on the other side compared to the extreme of your side
 you know what, I think, that still ends up ~O(n^2)~ ish, but also what on earth happens as low and high meet? You're not actually done


 | Pair  | Diff |   | 0 | 5 | 10 | 18 | 19 | 20 |
 |-------+------+---+---+---+----+----+----+----|
 | 0,20  |   20 |   | x |   |    |    |    | x  |
 | 0,19  |   19 |   | x |   |    |    | x  |    |
 | 0,18  |   18 |   | x |   |    | x  |    |    |
 | 5,20  |   15 |   |   | x |    |    |    | x  |
 | 5,19  |   14 |   |   | x |    |    | x  |    |
 | 5,18  |   13 |   |   | x |    | x  |    |    |
 | 10,20 |   10 |   |   |   | x  |    |    | x  |
 | 10,19 |    9 |   |   |   | x  |    | x  |    |
 | 10,18 |    8 |   |   |   | x  | x  |    |    |

 Well this is interesing, something went wrong - we never consdiered ~0,10~, I suppose that's something we need to do always, also check against the extreme of your own side
 But even then thre is more since after you reach th midpoint, you have to check each side so for example

 | _0,10 | __10 |   | x |   | _x | __ | __ | __ |
 | 5,10  |    5 |   |   | x | x  |    |    |    |
 | 0,5   |    5 |   | x | x |    |    |    |    |
 | 18,20 |    2 |   |   |   |    | x  |    | x  |
 | 19,20 |    1 |   |   |   |    |    | x  | x  |

Yeah, the fact that this isn't always in order, and that we still have to iterate inward like this...it doesn't *seem* faster. Also that 5/10 is weird
