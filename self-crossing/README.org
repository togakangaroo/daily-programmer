* Self Crossing
** The Problem
   You are given an array ~x~ of ~n~ positive numbers. You start at point ~(0,0)~ and moves ~x[0]~ metres to the north, then ~x[1]~ metres to the west, ~x[2]~ metres to the south, ~x[3]~ metres to the east and so on. In other words, after each move your direction changes counter-clockwise.

   Write a one-pass algorithm with =O(1)= extra space to determine, if your path crosses itself, or not.

   #+begin_src artist :exports code
     ┌───┐
     │   │
     └───┼──>
     .   │
   #+end_src

   #+name: example-1-crossing
   | 2 | 1 | 1 | 2 |

   Expected Output: =true=

   #+begin_src artist :exports code
     ┌──────┐
     │      │
     │
     │
     └────────────>
   #+end_src

   #+name: example-2-no-crossing
   | 1 | 2 | 3 | 4 |

   Expected Output: =false=

   #+begin_src artist :exports code
     ┌────┐
     │    │
     │    │
     └─>  │
   #+end_src

   #+name: example-3-no-crossing
   | 2 | 2 | 2 | 1 |

   Expected Output: =true=

   #+begin_src artist
     .        +--+
     .        |  |
     .    +---+  |
     .    |      |
     .    x------+
   #+end_src
   #+name: example-4-crossing
   | 2 | 0 | 0 | 4 | 2 | 0 | 0 | 3 | 0 | 0 | 4 | 0 | 0 | 7 |

   Expected Output: =true=

** Implementation

   If we can generate the list of points then at each point we can check if we crossed one of the lines that came before. Because I prefer to work with generators and its idiomatic Racket to make functions as flexible as possible, I want to stream back a sequence of points defining the lines and whether each line crosses any of the predecessors.


*** Helper Utilities
**** Folding Sequence

     A helpful utility function here would be one that can work as a =fold= but return a stream that yields back intermediate steps. That exists within transducers but I haven't found a way to make that works with streams. Regardless, its easy enough to implement

     #+name: folding-sequence
     #+begin_src racket :eval no
       (require racket/generator)

       (define (folding-sequence initial fn seq)
         (define-values (has-more? next) (sequence-generate seq))
         (sequence->stream
          (in-generator
           (let recur ([acc initial])
             (cond [(has-more?) (let ([next-val (fn acc (next))])
                                  (yield next-val)
                                  (recur next-val))])))))
     #+end_src

     #+begin_src racket :results output :exports both :noweb strip-export
       <<requires>>
       <<folding-sequence>>
       (sequence->list (folding-sequence 0 + '(1 2 3 4 5)))
     #+end_src

     #+RESULTS:
     : '(1 3 6 10 15)

     Oh, I just found [[https://docs.racket-lang.org/collections/collections-api.html?q=sequence#%28def._%28%28lib._data%2Fcollection..rkt%29._foldl%2Fsteps%29%29][data/collections:foldl/steps]] the only differences are argument order and whether the seed is also emitted

     #+begin_src racket :results output :exports both :noweb strip-export
       <<requires>>
       (sequence->list (foldl/steps + 0 '(1 2 3 4 5)))
     #+end_src

     #+RESULTS:
     : '(0 1 3 6 10 15)

     Looks like we won't have to move this after all.

**** Dedupe consequitive

     Since when we move 0 spaces we end up at the same point as before, we will want the ability to de-dupe consecutive points. Lets write a helper for that too. Deduping ~1 1 2 3 2 2 1~ should generate ~1 2 3 2 1~

     #+name: dedupe-consequitive
     #+begin_src racket :eval no :noweb strip-export
       (define (dedupe-consequitive seq #:eq? [eq? eq?])
         (sequence->stream
          (in-generator
           (let recur ([prev 'dedupe-consequitive-a-value-that-never-matches]
                       [remaining seq])
             (match remaining
               [(sequence) (void)]
               [(sequence next next-rest ...)
                (cond [(not (eq? prev next))
                       (yield next)])
                (recur next next-rest)])))))
     #+end_src

     Note that we also accept an optional keyword arg that we will use later to supply a custom comparison function

     #+begin_src racket :results output :exports both :noweb strip-export
       <<requires>>
       <<dedupe-consequitive>>
       (~> '(1 1 2 3 3 4 4 4 5 6 7 7 9 9 7) dedupe-consequitive sequence->list)
     #+end_src

     #+RESULTS:
     : '(1 2 3 4 5 6 7 9 7)

*** Get sequence of points

    Moving past that, we start by simply generating the points that define the lines. The interesting thing is that every four cells in a row indicate a different direction to move. We could define the directions a cell in each position would move as a vector that we're multipling by and then adding.

    So each new point is found as follows

    | Move | Direction Vector | Move Vector (A*B) | New Point (C+PrevPoint) |
    |------+------------------+-------------------+-------------------------|
    |    2 | (0 1)            | (0 2)             | (0 2)                   |
    |    1 | (-1 0)           | (-1 0)            | (-1 2)                  |
    |    3 | (0 -1)           | (0 -3)            | (-1 -1)                 |
    |    0 | (1 0)            | (0 0)             | (-1 -1)                 |
    |    1 | (0 1)            | (0 1)             | (-1 0)                  |


    First we define the directions sequence. In code this is as simple as defining the direction vector and cycling all the options forever.

    #+name: directions
    #+begin_src racket :eval no :noweb strip-export
      (define directions (in-cycle (map list->vec '((0 1) (-1 0) (0 -1) (1 0)))))
    #+end_src

    With the above helper functions, we have just about everything necessary to get our points. We simply zip up our directions and our moves, multiplying each through to get the amount of steps along the x and y axis that happen at each point. We then just sum these up from the starting point streaming back each point.

    #+name: get-points
    #+begin_src racket :eval no :noweb strip-export
      <<directions>>
      <<dedupe-consequitive>>

      (define (vec-eq? vec1 . other-vecs)
        (and (vec? vec1)
             (andmap (lambda (v) (and (vec? v) (vec= v vec1))) other-vecs)))

      (define starting-point (make-parameter (vec 0 0)))

      (define (get-points moves)
        (define direction-moves (for/stream ([d directions]
                                             [m moves])
                                  (vec* d m)))
        (~> (starting-point)
            (foldl/steps vec+ _ direction-moves)
            (dedupe-consequitive #:eq? vec-eq?)))
    #+end_src

    Lets check this against example 4 above

    #+begin_src racket :results output :exports both :noweb strip-export :var data=example-4-crossing
      <<requires>>
      <<get-points>>
      (~> (first data)
          get-points
          sequence->list)
    #+end_src

    #+RESULTS:
    : (list (vec 0 0) (vec 0 2) (vec 4 2) (vec 4 4) (vec 7 4) (vec 7 0) (vec 0 0))

*** Get Line Segments from poitns

    Now we get the line segments simply by zipping this sequence of ordered points with itself offset by one

    #+name: line-segments-from-points
    #+begin_src racket :eval no :noweb strip-export
      (define (line-segments-from-points points)
        (for/stream ([p1 points]
                     [p2 (rest points)])
          (cons p1 p2)))
    #+end_src

    #+begin_src racket :results output :exports both :noweb strip-export :var data=example-4-crossing
      <<requires>>
      <<get-points>>
      <<line-segments-from-points>>
      (~> (first data)
          get-points
          line-segments-from-points
          sequence->list
          pretty-print)
    #+end_src

    #+RESULTS:
    : (list
    :  (cons (vec 0 0) (vec 0 2))
    :  (cons (vec 0 2) (vec 4 2))
    :  (cons (vec 4 2) (vec 4 4))
    :  (cons (vec 4 4) (vec 7 4))
    :  (cons (vec 7 4) (vec 7 0))
    :  (cons (vec 7 0) (vec 0 0)))

*** Combination Triangle

    We want to be able to pair each line segment with each line segment that follows it forming a sort of combinations triangle.

    #+name: combination-triangle
    #+begin_src racket :eval no
      (define (generate-sequence fn-sequence-generate*)
        (sequence->stream
         (in-generator
          (define (keep-going front continue)
            (when front
              (yield (first front))
              (call-with-values continue keep-going)))
          (call-with-values fn-sequence-generate* keep-going))))

      (define (combination-triangle seq)
        (sequence->stream
         (in-generator
          (define (keep-going front continue)
            (when front
              (yield (list (first front)
                           (generate-sequence continue)))
              (call-with-values continue keep-going)))
          (call-with-values (thunk (sequence-generate* seq)) keep-going))))
    #+end_src

    To test this I'd like for the input ~0 1 2 3 4~ to get back
    - ~(0 (1 2 3 4))~
    - ~(1 (2 3 4))~
    - ~(2 (3 4))~
    - ~(3 (4))~
    - ~(4 ())~

    #+begin_src racket :results output :exports both :noweb strip-export :var data=example-4-crossing
      <<requires>>
      <<combination-triangle>>

      (~>> (naturals)
           (take 5)
           combination-triangle
           sequence->list
           (map (lambda (x) (list (first x) (sequence->list (second x)))))
           sequence->list)
    #+end_src

    #+RESULTS:
    : '((0 (1 2 3 4)) (1 (2 3 4)) (2 (3 4)) (3 (4)) (4 ()))

    Looks like this works
    
*** Get intersections

    With the combinations triangle we can match up each line segment against the "others" to verify if there is an intersection.

    We need just one more helper function here and thats one that can take a pair of ~(line-segment remaing-line-segments)~ and tell us if there are any intersections.

    Fortunately actually checking if two lines intersect - [[https://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/][which is surprisingly not that easy]] - is already [[https://docs.racket-lang.org/sfont/Geometry.html?q=vec#%28def._%28%28lib._sfont%2Fgeometry..rkt%29._segment-intersection%29%29][implemented for us]] in the racket geometry module.

    #+begin_src racket :results output :exports both
      (require sfont/geometry)
      (segment-intersection (vec 0 0) (vec 0 2) (vec -1 1) (vec 0 1))
      (segment-intersection (vec 0 0) (vec 0 2) (vec -1 1) (vec -1 2))
    #+end_src

    #+RESULTS:
    : (vec 0 1)
    : #f

    Getting all intersections is just a matter of running this against each combination. We'll just go ahead and stream back any intersections and if you want to see if there are any you can check if the resulting sequence is empty.

    #+name: intersections
    #+begin_src racket :eval no
      (define/match (intersections this-segment-and-segments-to-check)
        [((list _ (? empty?))) '()]
        [((list (cons b1 e1) segments))
         (~>> (rest segments)
              (map (match-lambda [(cons b2 e2)
                                  (segment-intersection b1 e1 b2 e2)]))
              (filter identity))])
    #+end_src

*** Check for crossings 

    Now we can put together all the above to check if the are any crossings.
    
    #+name: has-crossing
    #+begin_src racket :eval no :noweb strip-export
      <<requires>>
      <<get-points>>
      <<line-segments-from-points>>
      <<combination-triangle>>
      <<intersections>>

      (define has-crossing (lambda~>> get-points
                                      line-segments-from-points
                                      combination-triangle
                                      (filter (compose not empty? intersections))))
    #+end_src

    And to verify this against our inputs above, remember that we expect our examples to cross, not cross, not cross, then cross again.
    
    #+begin_src racket :results output :exports both :noweb strip-export :var data1=example-1-crossing :var data2=example-2-no-crossing :var data3=example-3-no-crossing :var data4=example-4-crossing
      <<has-crossing>>
      (~>> (list data1 data2 data3 data4)
           (map first)
           (map (compose not empty? has-crossing))
           sequence->list)
    #+end_src

    #+RESULTS:
    : '(#t #f #f #t)

*** Includes Used

    #+name: requires
    #+begin_src racket :eval no
      (require racket/generator)
      (require racket/match)
      (require racket/pretty)
      (require threading)
      (require (except-in data/collection sequence->list)) ;;https://stackoverflow.com/a/62505165/5056
      (require sfont/geometry)
    #+end_src
