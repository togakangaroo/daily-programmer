#+TITLE: Number of Nodes in the Sub-Tree With the Same Label

* Problem Statement
- [[https://operation-code.slack.com/archives/C7JMZ5LAV/p1673533729987749][From the Operation Code Slack]]

You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of ~n~ nodes numbered from ~0~ to ~n - 1~ and exactly ~n - 1~ edges. The root of the tree is the node ~0~, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. The node with the number ~i~ has the label ~labels[i]~).

The edges array is given on the form ~edges[i] = [ai, bi]~, which means there is an edge between nodes ~ai~ and ~bi~ in the tree.

Return an array of size ~n~ where ~ans[i]~ is the number of nodes in the subtree of the ~ith~ node which have the same label as node ~i~.

A subtree of a tree ~T~ is the tree consisting of a node in ~T~ and all of its descendant nodes.
** Exmaple 1

#+DOWNLOADED: screenshot @ 2023-01-13 21:15:43
[[file:Problem_Statement/2023-01-13_21-15-43_screenshot.png]]


#+name: example-1
| n | edges                                 | labels  | output          |
|---+---------------------------------------+---------+-----------------|
| 7 | [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]] | abaedcd | [2,1,1,1,1,1,1] |

*Explanation:* =Node 0= has =label 'a'= and its sub-tree has =node 2= with =label 'a'= as well, thus the answer is =2=. Notice that any node is part of its sub-tree. =Node 1= has a =label 'b'=. The sub-tree of =node 1= contains =nodes 1,4= and =5=, as =nodes 4 and 5= have different labels than =node 1=, the answer is just =1= (the node itself).
** Example 2

#+DOWNLOADED: screenshot @ 2023-01-13 21:20:49
[[file:Problem_Statement/2023-01-13_21-20-49_screenshot.png]]

#+name: example-2
| n | edges               | labels | output     |
|---+---------------------+--------+------------|
| 4 | [[0,1],[1,2],[0,3]] | bbbb   | [4,2,1,1] |

** Example 3

#+DOWNLOADED: screenshot @ 2023-01-13 21:24:50
[[file:Problem_Statement/2023-01-13_21-24-50_screenshot.png]]

#+name: example-3
| n | edges                     | labels | output      |
|---+---------------------------+--------+-------------|
| 5 | [[0,1],[0,2],[1,3],[0,4]] | aabab  | [3,2,1,1,1] |

** Constraints
- ~1 <= n <= 105~
- ~ai~=bi~
- ~labels~ is consisting of only of lowercase English letters.

* Brainstorming

First it occurs to me that ~n~ is completely ancillary. Specifically, it *must* be true that ~n = length(edges)+1 = length(labels)~ for any of this to be valid. This was originally written into the constraints which I didn't bother copying but its worth pointing out that not only is it a constraint but the problem literally makes no sense if this is not true.

Next there's the point that ~n <= 105~. This isn't like a super-deep tree, while I *want* to do better than brute-force here, realistically brute-force would be just fine.

Another thought bubble is that the number of duplicates in ~labels~ set upper bounds. In [[Example 3]] we have ~labels="aabab"~. That means a node associated with ~a~ can only have =3, 2, or 1= count and in fact *some* node associated with ~a~ must have a =1= count (maybe even two nodes). At the very least it is useful in the following situation: Consider a tree as follows

#+begin_src plantuml :file Problem_Statement/brainstorming-diagram.png
  @startuml
  hide empty description
  [*] -> a0
  a0 -> a1
  a0 --> b2
  a1 -> b3
  b3 -> b4
  b2 -> c5
#+end_src

#+RESULTS:
[[file:Problem_Statement/brainstorming-diagram.png]]

If you are trying to get the same-label factor for =a0= you need only to take one step. This gives you the factor =2= and since you know it is impossible for there to be more than two =a= nodes, you can stop navigating the subtree.

In fact, as the above example shows, this will *also* tell you the factor for =a1=. And once we've established the factor for a node, it might as well not exist. After we've preformed the above navigation, we might as well be working with two disconnected trees. Nodes =a0= and =a1= can no longer affect any output since nothing beneath them can possibly be an =a=

#+begin_src plantuml :file Problem_Statement/brainstorming-diagram2.png
  @startuml
  hide empty description
  [*] -> b3
  [*] --> b2
  b3 -> b4
  b2 -> c5
#+end_src

#+RESULTS:
[[file:Problem_Statement/brainstorming-diagram2.png]]

One more thought is that while the last contraint about labels being only english letters might feel meaningless, it actually sets an upper bound for how many different labels we might have; 26. This means that grouping by node label and then jumping around from there might not be such a bad tactical move, we just aren't going to have that much stuff to go through.

Finally, there's the interesting setup of our connections. The first item is where we're jumping from, the next where we're jumping to. You can navigate an entire subtree pretty easily this way and if we're going to be doing that a lot, sticking them into a hashtree by the first element might be a great idea up front.

So interestingly, I feel like this problem is actually a good fit for mutability and object orientation. For example in the above, if ~a1~ is a mutable node it can be done in a way where you can implment visitor pattern such that when you call ~a1.visit(fn)~ it will apply ~fn(a1)~ before delegating to children until its factor is known, and will immediately delegate to children once it is. I like this idea.

-----

You know, I started coding the above ([[https://raw.githubusercontent.com/togakangaroo/daily-programmer/1439fd713802ee4d49b7f69bc32359951a968626/number-of-nodes-with-same-label-in-subtree/README.org#:~:text=like%20this%20idea.-,*%20Implementations,-%3APROPERTIES%3A%0A%3Aheader%2Dargs][see commit 1439fd713802ee4d49b7f69bc32359951a968626]]) and it just doesn't feel right. For one thing you end up moving through lists multiple times so while you might end up with really nice models, it just seems like weird overkill that will be more complex than it needs to be.

One particular reason for this is the realization that you don't actually know what the *root* node of the tree is up front. You just have edges to navigate. In fact, the problem doesn't even seem to hinge on this stuff being a single tree.

Can we do things in one pass? I have a feeling we can. If the folloing are our edges we can progres through them as follows

#+begin_src plantuml :file Problem_Statement/brainstorming-diagram3.png
  @startuml
  hide empty description
  a1 -> b3
  b2 -> c5
  a0 -> a1
  a6 <-- b2
  a0 --> b2
  b3 -> b4
  [*] -> a0
#+end_src

#+RESULTS:
[[file:Problem_Statement/brainstorming-diagram3.png]]

As we move through the edges here is what we will know about each node in terms of what their minimal factor must at least be and what nodes are navigable to upwards from there

| edge   |   | a1 | b3 | b2 | c5 | a0 | a6 | b4 |   | upwards navigability                                  | notes                                                                      |
|--------+---+----+----+----+----+----+----+----+---+-------------------------------------------------------+----------------------------------------------------------------------------|
| a1->b3 |   |  1 |  1 |    |    |    |    |    |   | a1<b3 b3                                              |                                                                            |
| b2->c5 |   |  1 |  1 |  1 |  1 |    |    |    |   | a1<b3 b3 b2<c5 c5                                     | Effectively two disconnected trees each with two differently labeled nodes |
| a0->a1 |   |  1 |  1 |  1 |  1 |  2 |    |    |   | a1<b3 b3 b2<c5 c5 a0<a1,b3                            | a0 is reachable from a1 & b3, this means it has a min factor of 2          |
| b2->a6 |   |  1 |  1 |  1 |  1 |  2 |  1 |    |   | a1<b3 b3 b2<c5,a6 c5 a0<a1,b3 a6                      | b2 is reachable from a6 too                                                |
| a0->b2 |   |  1 |  1 |  1 |  1 |  1 |  1 |    |   | a1<b3 b3 b2<c5,a6 c5 a0<a1,b3,b2,c5,a6 a6             | a0 connects to b2 subtree and therefore is minimum of 3                    |
| b3->b4 |   |  1 |  2 |  1 |  1 |  3 |  1 |  1 |   | a1<b3,b4 b3<b4 b2<c5,a6 c5 a0<a1,b3,b2,c5,a6,b4 a6 b4 |                                                                            |

To make the above invented notation ab it clearer, what happened on the =a0->a1= row was that we found out =a0= navigated down to =a1=. This means that =a0= is reachable from =a1=. We already knew that =a1= is reachable from =b3= so we can now say that =a0= is reachable from =a1= and =b3=.

Initially I was thinking the running tallies in the middle columns would be important but having done the exercise it seems like they don't matter at all. At every single point you can get the totals simply by reviewing the navigability chart for each node, seeing how many share the label, and adding =1=.

So if that's the case, should we just flat out calculate the navigability chart? The worst case scenario is where the entire tree is one flat list of max =n=105= in which case the memory usage would be =105+104+103+...+1= or =106*105/2= which is about space for storing 5K nodes. Not really bad at all. So heck, why even bother with all that other stuff? Lets do it.

* Implementations
:PROPERTIES:
:header-args: :noweb yes
:header-args:typescript: :eval no
:END:

I feel like I haven't done these in Typescript, plus I just launched a [[https://github.com/togakangaroo/create-ob-npx][new way to integrate TypeScript with org mode]], so let's do that.

Lets start by creating a structure for our ~Node~. This is simply a tuple of our label and index.

#+name: Node
#+begin_src typescript :eval yes :results silent
  type Node = {
      readonly label: NonNullable<string>
      readonly index: NonNullable<number>
  }
#+end_src

Now lets create the navigability map we will be building up

#+name: nodesNavigableFrom
#+begin_src typescript
  type Index = number

  const nodesNavigableFrom : Map<Index, {readonly node: Node, readonly navigableFrom: Set<Node>}> = new Map()
#+end_src

And then let's create a factory function for ~Node~. Yes, I could do classes, but I don't love them as a primitive. Given the choice, I'd prefer to use basic types and factory functions, and while that's not the most idiomatic thing in Typescript, its also not so uncommon a pattern that a mob will be showing up at migGht front door for doing this. Furthermore, because javascript doesn't have the best support for comparison of non-primitives by value, we never actually want to instantiate the same ~Node~ twice. While that is possible with a constructor, it is more intuitive with a factory.

#+name: getNodesThatCanNavigateTo
#+begin_src typescript
  const getNodesThatCanNavigateTo = (index: Index) => {
      let nodeNavigation = nodesNavigableFrom.get(index)
      if(!nodeNavigation) {
          const node: Node = {index, label: labels[index],}
          nodeNavigation = { node, navigableFrom: new Set([node]) }
          nodesNavigableFrom.set(index, nodeNavigation)
      }
      return nodeNavigation.navigableFrom
  }
#+end_src

Now, what do we do when we consider an edge?

#+name: considerNavigabilityFromEddge
#+begin_src typescript
  type Edge = {readonly fromIndex: Index, readonly toIndex: Index}

  const considerNavigabilityFromEddge = ({fromIndex, toIndex}: Edge) : void => {
      const setOfNodesThatCanNavigateToFrom = getNodesThatCanNavigateTo(fromIndex)
      for(const node of getNodesThatCanNavigateTo(toIndex))
          setOfNodesThatCanNavigateToFrom.add(node)
  }
#+end_src

Also, since we're dealing with sets we need a utility function to count the amount of values that match a certain predicate within it.

#+name: countSet
#+begin_src typescript
  const countSet = <T> (set: Set<T>, predicate: (_: T) => Boolean) => {
      let cnt = 0;
      for(const x of set.values())
          if(predicate(x))
              cnt+=1
      return cnt
  }
#+end_src

#+begin_src typescript :eval yes
  const labels = "aabbbca"
  const edges = [[1, 3], [2, 5], [0, 1], [2, 6], [0, 2], [3, 4]].map(([fromIndex, toIndex]) => ({fromIndex, toIndex}))

  <<Node>>
  <<nodesNavigableFrom>>
  <<getNodesThatCanNavigateTo>>
  <<considerNavigabilityFromEddge>>
  <<countSet>>

  for(const edge of edges)
      considerNavigabilityFromEddge(edge)
  for(const [index, {node: {label}, navigableFrom}] of nodesNavigableFrom.entries()) {
      const sameLabelFactor = countSet(navigableFrom, (node) => node.label === label)
      console.log(`Node[${index}](label = ${label}) has ${sameLabelFactor} with label ${label} in its subtree`)
  }
#+end_src

#+RESULTS:
: Node[1](label = a) has 1 with label a in its subtree
: Node[3](label = b) has 2 with label b in its subtree
: Node[2](label = b) has 1 with label b in its subtree
: Node[5](label = c) has 1 with label c in its subtree
: Node[0](label = a) has 3 with label a in its subtree
: Node[6](label = a) has 1 with label a in its subtree
: Node[4](label = b) has 1 with label b in its subtree

The order is a bit off, lets write tests against the examples

#+name: test-against-example
#+begin_src typescript :var input=example-1
  type ExampleType = [[object, string, string, string]]
  const [[_, edgesString, labels, outputString]] = (input as ExampleType)
  const edges = JSON.parse(edgesString)

  <<Node>>
  <<nodesNavigableFrom>>
  <<getNodesThatCanNavigateTo>>
  <<considerNavigabilityFromEddge>>
  <<countSet>>

  for(const [fromIndex, toIndex] of edges)
      considerNavigabilityFromEddge({fromIndex, toIndex})

  const results = Array.from(labels).map((label, index) => {
      const navigableFrom = getNodesThatCanNavigateTo(index)
      return countSet(navigableFrom, (node) => node.label === label)
  })

  console.log(JSON.stringify(results) === outputString ? "PASS" : "FAIL", results)
#+end_src


Let's test it against Example 1

#+call: test-against-example[:eval yes](input=example-1)

#+RESULTS:
: PASS

Nice, what about Example 2?

#+call: test-against-example[:eval yes](input=example-2)

#+RESULTS:
: FAIL [ 3, 2, 1, 1 ]

Uh oh. Well we have one passing, lets refactor a bit to simplify and maybe we'll find the bug
